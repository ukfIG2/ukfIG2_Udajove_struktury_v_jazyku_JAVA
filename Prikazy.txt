-001.TYPY_HODNOT

    Cele cisla
        byte
        short
        int
        long
    S desatinnou ciarkou
        float
        double
    boolean
        true
        false
    Znaky
        char
            char a=''
    Retazce
        String = ""
                 null;

-002.LOGICKE OPERATORY

    &&                          - ukonci vyhodnotenie v momente, ze podmienka je nepravdiva
    &       -   and a sucasne   - vyhodnocuje vyraz do konca
    |
    ||      -   or alebo

-003.SPECIALNE ZNAKY

    \t	– 	vloží do textu tabulátor
    \b 	– 	vloží do textu backspace
    \n 	– 	vloží do textu nový riadok
    \r 	– 	vloží do textu znak pre návrat vozíka
    \f 	– 	vloží do textu vertikálny tabulátor
    \' 	– 	vloží do textu apostrof
    \" 	– 	vloží do textu úvodzovky
    \\ 	– 	vloží do textu spätné lomítko

-004.PRAZDNY OBSAH CELOCISELNEJ PREMMENNEJ JE null alebo ""

-005.MINIMALNA MAXIMALNA HODNOTA
    MIN = Integer.MIN_VALUE;
    MAX = Integer.MAX_VALUE;

000.ZAKLAD

    public class _01 {

        public static void main(String[] args) {
            // TODO Auto-generated method stub
        }
    }

001.Prikaz VYSTUPU

    System.out.println("");    - vypise a to za tym odriadkuje
    System.out.print("");      - vypise do riadku

002.Prikaz VSTUPU

    import java.util.Scanner;   -   importujeme kniznicu
    Scanner vstup = new Scanner(System.in);     -   vytvorime Scanner
    int a = vstup.nextInt();    -   nacitame cisla
                 .nextFloat();   -   nacitame realne cisla
                 .nextDouble();  -  nacitame desatinne cislo
                 .next().charAt(0); - nacitame charakter
                 .nextLine();       -   nacitame textovy udaj

003.PODMIENENY PRIKAZ

    if (podmienka){
        prikaz1;
    }
    else {
        prikaz2;
    }

004.CYKLUS S PEVNYM POCTOM

    for (i=1; i<n; i=i+1){
    prikaz1;
    prikaz2;
    }
        inicializacnyVyraz; podmienkaUkoncenia; krok
        ak je podmienka splnena vykona prikaz

005.CYKLUS S NEZNAMYM POCTOM OPAKOVANI

    cyklus sa vykona, dokedy je splnena podmienka
    while (podmienka) {
    prikaz;
    }

006.CYKLUS S PODMIENKOU NA KONCI

    Vykona sa aspon raz, potom sa skontroluje podmienka
    do {
    prikaz1;
    prikaz2;
    }   while (podmienka);

007.ZAOKRUHLENIE

    Math.round();
    Výsledkom operácie je celé číslo, avšak nie typu int, s ktorým sme doposiaľ pracovali, ale typu long, ktorý dokáže uchovávať väčšie hodnoty.
    Musi byt pred premennou 'long'

008.ZAOKRUHLENIE NA DESATINNE MIESTA

    double pi = 3.14159;                    - Takze najprv to zaokruhli a potom vi-deli
    double pi2 = Math.round(pi*100)/100;
    Vynásobenie hodnoty premennej 100 posunie desatinnú čiarku o dve miesta na 314.159. Táto hodnota sa prostredníctvom round zaokrúhli na celé číslo, t.j. 314 a napokon sa vydelením 100 sa desatinná čiarka posunie o dve desatinné miesta doľava. Výsledkom je 3.14

009.Pretypovanie

    long b = 15;
    int c = (int) b;        -   totototototok
    System.out.print(c);

----------------------------------------------------------Retazce--STRING
010.VELKOST STRINGU

    int dlzka = premenna.length()
                        .length  - length pri poliach nema zatvorky

011.SPAJANIE STRINGU

    +
    alebo
    concat = retazec1.concat(retazec2);

012.ZISKANIE ZNAKU

    char a = Priklad.charAt(0);

    ak ideme od zadu

    int dlzka = premenna.length();
    char a = premenna.charAt(dlzka-1);

013.ZISKANIE POD_RETAZCA [REZ STRINGU]

    String premenna_01 = "AHOJ";
    "String nazov premennej = premenna.substring(int beginIndex, int endIndex);"
    String premenna_02 = premenna_01.substring(00,11);

014.POROVNAVANIE RERAZCOV

    boolean equals(Object anObject)
    premenna.equals(premenna);
    a.equals(b);

015.POROVNAVANIE RETAZCOV BEZ VELKOSTI PISMEN

    a.equalsIgnoreCase(b);

016.POROVNAVANIE RETAZCOV LEXIKOGRAFICKY

    int compareTo(String anotherString)
    int i = a.comprareTo(b);
	int compareToIgnoreCase(String anotherString)

017.PREHLADAVANIE RETAZCA

    String text = "m a m a   m a   E m u";
                   0 1 2 3 4 5 6 7 8 9 10
    int prva = text.indexOf("ma");
    int posledna = text.lastIndexOf("ma")
    PRVA 0, POSLEDNA 5

018.PRETYPOVANIE STR NA INT V RETAZCI

    Integer.parseInt(premenna);

019.PRETYPOVANIE INT NA STR

    String.valueOf(premenna)

020.PRETYPOVANIE CHAR NA INT

    Character.getNumericValue()

021.Kontrola ci je

    Character.isDigit()
             .isLetter()
             .isWhitespace()
             .UpperCase()
             .isLowerCase()
21.ZMENA CHARAKTERU

    Character.toUpperCase()
             .toLowerCase()
             .toString()

22. VIACNASOBNE VETVENIE

    switch(premenna){
    case 1: prikaz1;
            prikaz2;
            break;
    case 2: prikaz1
            prikaz2
            break;
    default:    prikaz1
                prikaz2
                break;
    }

    default     -   ak sa nic z "case" nestane tak nastae default.
    switch      -   kontroluje hodnotu v premmenej s case-om

23. Vynimky

    try {}            -   zacina blok prikazov
    catch(exception e){}   -   odchyti chybu
    finally{}         -   vzdy sa vykona

24. Chyby

    1   catch(NumberFormatException e) {
        System.out.println("Retazec nie je cislo!");

    2   catch(ArithmeticException e) {
        System.out.println("Nulou sa nedeli!");

25. POLIA ZOZNAMY

    int[] arr1;
    int arr2[];
    double arr3[];
    String[] strs;  -   inicializacia pola

26. VYHRADENIE PAMATE

new
        int[] arr1;
        arr= new int[100];
        int arr[] = new int[50];

27. Pocet prvkov

    pocetPrvkov = premenna.length;

28. Vkladanie do zoznamu

    Scanner vstup = new Scanner(System.in);
        int[] arr = new int[10];
        for(int i = 0; i < 5; i++) {
        arr[i] = vstup.nextInt();
        }

29. KONSTATNA PREMENNA

    final int pocet = 10;

30. NAHODNE CISLA

    Math.random()
        0.0<=Math.random()<1.0.     -Nam da iba hodnotu od 0.0po1.0.
        Math.random()*10
    Zaporne
        arr[i] = (int) (-50 + Math.random() * 101);

31. PRETYPOVANIE NAHODNEHO CISLA Z DOUBLE NA CELE

    int num = (int)(Math.random() * 9);     -od 0 do 8

32. TRIEDENIE V POLOCH

    for(int i = 0; i < arr.length-1; i++) { // počet prechodov
   for(int j = 0; j < arr.length-i-1; j++) { // posun po posledný, predposledný atď (n-i) prvok
      if (arr[j]>arr[j+1]) {  // výmena prvkov
            int pom = arr[j];
            arr[j] = arr[j+1];
            arr[j+1] = pom;
      }
   }
 }

33.  SPLIT

    premenna.split()     -príkaz split rozdelí obsah premennej riadok do poľa,  pričom ako oddeľovač sa uvažuje znak  v argumente
        ,;" "

34. Matice

    int n = vstup.nextInt();
    nt[][] matica = new int[m][n];
    for(int i = 0; i < m; i++) {
        for(int j = 0; j < n; j++) {
            matica[][] = vstup.();

35. Precod po cellom POLI foreach
    for(int "premenna" : "premenna_pola")

-----------------------------------------------------------Subory

36. Na vytvorenie súboru potrebujeme FileWriter, ktorý zabezpečí vytvorenie a následné sprístupnenie súboru a poskytne nástroje na načítavanie znakov.

    FileWriter fW = new FileWriter("file.txt");

37. Následne vytvorené spojenie poskytneme BufferedWriter-u, ktorý existujúci FileWriter rozšíri o schopnosť zapisovať celú postupnosť znakov.

    BufferedWriter bW = new BufferedWriter(fW);

38. Celý zápis môžeme vykonať aj v jednom kroku:

    BufferedWriter bW = new BufferedWriter(new FileWriter("file.txt"));

39. Pre zápis reťazca do súboru používame príkaz

    bW.write(txt);

40. Pre odriadkovanie

    bW.newLine();

41. Stream je po skončení operácií potrebné uzavrieť kvôli uloženiu údajov z medzipamäte a uvoľneniu prístupu k súboru. Používame na to príkaz:

    bW.close();
    Zatvorení BufferedReader-u sa zavrie aj jemu podriadený FileReader.

42. Samotné čítanie riadku sa vykoná pomocou:

    String s = bR.readLine();

43. Cesta k suboru

    String myFile = "C:\\adresar\\udaje.txt";

44. Vzor pre subory

import java.io.*;
public class JavaApp {

    public static void main(String[] args) {
        // sem napiste svoj kod

      	String nazov = "nazov/premenna suboru";

      try{
        FileReader FR = new FileReader(nazov);
      	BufferedReader BR = new BufferedReader(FR);
        String riadok = "";
        while(riadok!=null){
        riadok = BR.readLine();
          if(riadok!=null) System.out.println(riadok); //zobrazi cely riadok
        }//while_riadok
        BR.close();
      }//try
      catch(IOException e){
      	System.out.println(e.getMessage());
      	}//catch

-----------------------------------------------------------------------------
45. Set

    Na prvý pohľad najjednoduchšou štruktúrou na uchovávanie viacerých hodnôt je Set. Táto štruktúra nemôže obsahovať duplicitné prvky – po ich vložení sa duplicitný prvok jednoducho nepridá.
    V programe používame jej implementácie HashSet a TreeSet.
    Prvky sa nemusia vypisovať v poradí, v akom boli do zoznamu vkladané. Na zabezpečenie čo najefektívnejšej práce ich metódy údajovej štruktúry ukladú po svojom. Rozdiel medzi implementáciami je v tom, že TreeSet vracia prvky usporiadané.

    Deklarácia premennej typu Set môže mať podobu niektorej z jej implementácií:
    HashSet mySet1 = new HashSet();
    TreeSet mySet2 = new TreeSet();

    Ak chceme vkladať údaje typu String, zápis bude mať podobu:
    HashSet<String> mySet1 = new HashSet<>();
    Takýto zápis označujeme ako generický a jeho účelom je zabrániť programátorovi aby do mySet vložil hodnotu iného typu ako je definovaná (String).

46. Pridanie do zoznamu(set)

    add()
    napr.[ HashSet<String> mySet = new HashSet<String>(); // HashSet deklarácia
            hset.add("Apple");    // pridanie prvkov do zoznamu
            hset.add(null);       // HashSet dokáže uchovať aj prázdnu hodnotu
            Metóda add() vracia true v prípade, ak sa vloženie podarilo a false v prípade, ak daný prvok už v zozname existuje.
        ]

47. Overenie ci sa prvok nachadza v mnozine

    if (hset.contains("Mango"))

48. Pocet prvkov v mnozine

    System.out.println(hset.size());

49. Vymazanie prvku zo zoznamu:

    hset.remove("Mango");

------------------------------------------------------------
50. Map

    Udajová štruktúra Map predstavuje štruktúru uchovávajúcu dvojice hodnôt <K, V>, kde:
        K: reprezentuje neopakovateľné (kľúčové) hodnoty
        V: predstavuje hodnoty, na ktoré je kľúčový údaj namapovaný
        HashMap - rovnako ako set uchováva hodnoty vo vlastnom poradí
        TreeMap - umožňuje usporiadať údaje podľa kľúča

        HashMap<String, String> textove = new HashMap<>();
        HashMap<Integer, String> kombinovane = new HashMap<>();

        Pozor, argumentom nemôže primitívny typ – je potrebné použiť vždy zodpovedajúcu triedu (int – Integer, char – Character, boolean – Boolean, double - Double)


47. Pridavanie do zoznamu(Map)

    put()
        Platí, že ak do štruktúry vložíme pre rovnakú kľúčovú hodnotu viac prvkov, zostane uložený posledný.
            V prípade, ak vložíme pre rôzne kľúče rovnakú druhú hodnotu, štruktúra ju uchová – dôležitým prvkom je vždy len hodnota kľúča.
    HashMap<String, String> m1 = new HashMap<>();
    m1.put("NR233AA", "Marhula");

48. Informácia o tom, či v zozname existuje kľúčová hodnota:

    if (myMap.containsKey ("NR408XX")) ...

49. Počet prvkov v zozname:

    System.out.println(myMap.size());

50. Vymazanie prvku zo zoznamu na základe kľúčovej hodnoty:

    myMap.remove("NR408XX");

51. Vrátenie zodpovedajúcej hodnoty pre daný kľúč:

    String myValue = myMap.get("NR233AA");

52. Pre nájdenie hodnoty a vypísanie kľúča musíme prejsť po zozname kľúčových hodnôt, ktoré nám pre prvky cyklu vráti metóda keySet():

    myMap.put("NR233AA", "Mak");
    myMap.put("BA23300", "Slivka");
    for(String key : myMap.keySet()) {      // prejde po zozname kľúčov
    // ak pre daný kľúč je zodpovedajúca hodnota Slivka
    if (myMap.get(key).equals("Slivka"))
        System.out.println(key);  // vypíše kľúč – čiže evidenčné číslo vozidla
    }

----------------------------------------------------------------------------------------------
53. List

    Štruktúrou, ktorá sa najviac blíži k poľu a umožňuje nám so zoznamom intuitívne pracovať je List.
    List má dve implementácie:

    ArrayList
    LinkedList

    ArrayList je údajová štruktúra pracujúca na princípe poľa. Pri svojom vzniku si vyhradí v pamäti súvislý blok, do ktorého vkladá údaje.

    Platí že:
        adresa začiatku súvislého bloku je známa,
        je známa veľkosť jedného prvku (v bytoch),
        pozícia i-teho prvku v pamäti sa ľahko vypočíta (ako začiatok bloku + i * veľkosť jedného prvku) a tak k nemu možno pristúpiť veľmi rýchlo.

    Indexovanie prvkov začína od 0.
    Po zaplnení vyhradeného bloku sa v pamäti vyhradí väčší blok, údaje sa doň skopírujú a ukazovateľ na zoznam nasmeruje naň – tieto operácie však nerobí programátor, sú vnútornou súčasťou ArrayListu.


54. Vytvorenie zoznamu ľubovoľných objektov

    ArrayList<Osoba> zoznam = new ArrayList<>();

55. Pridanie prvku

    zoznam.add(nejaky objekt príslušného typu);

56. Prečítanie prvku (nečítame cez index v [], ale prostredníctvom metódy)

    myElement = zoznam.get(i);

57. odstránenie prvku na i-tej pozícii

    zoznam.remove(i);

58. odstránenie prvku na i-tej pozícii

    zoznam.remove(i);

59. počet prvkov

    int length = zoznam.size();

60. Pridanie prvku na poziciu

    myList.add(pozícia, prvok)  ak dame na plnu  poziciu posunie doprava +1

61. Prehladavanie v zozname

    indexOf();

    napr.   ArrayList<String> myList = new ArrayList<>(); int pos = myList.indexOf("Peter");

    Vyhladat a spracovat

        ArrayList<String> myList = new ArrayList<>();
        // ... vloženie údajov do zoznamu
        for(int i = 0; i < myList.size(); i++) {
            if (myList.get(i).charAt(0) == 'C')
            System.out.println(myList.get(i));
        }

62. LinkedList

